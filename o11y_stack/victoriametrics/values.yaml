vm:
  defaultDashboardsEnabled: true
  experimentalDashboardsEnabled: true
  prometheus-node-exporter:
    enabled: true
  node:
    enabled: true
  kubeStateMetrics:
    enabled: true
  grafana:
    enabled: true
    testFramework:
      enabled: false
    sidecar:
      datasources:
        defaultDatasourceEnabled: false
    resources:
      requests:
        cpu: "0.25"
        memory: 250Mi
      limits:
        cpu: "0.25"
        memory: 500Mi
    persistence:
      enabled: true
      type: sts
      storageClassName: buildpiper-storage
      accessModes:
        - ReadWriteOnce
      size: 1Gi
      finalizers:
        - kubernetes.io/pvc-protection
    
  alertmanager:
    enabled: true
    config:
      global:
        resolve_timeout: 5m
      templates:
        - "/etc/vm/configs/**/*.tmpl"
      route:
        receiver: "blackhole"
      receivers:
      - name: blackhole
    monzoTemplate:
      enabled: false
    templateFiles:
      opstree-alert-template.tmpl: |-
        {{/* Alertmanager Silence link */}}
        {{ define "__alert_silence_link" -}}
          {{ .ExternalURL }}/#/silences/new?filter=%7B
          {{- range .CommonLabels.SortedPairs -}}
            {{- if ne .Name "alertname" -}}
              {{- .Name }}%3D"{{- .Value | urlquery -}}"%2C%20
            {{- end -}}
          {{- end -}}
          alertname%3D"{{- .CommonLabels.alertname -}}"%7D
        {{- end }}
        {{/* Severity of the alert */}}
        {{ define "__alert_severity" -}}
            {{- if eq .CommonLabels.severity "critical" -}}
            • *severity:* `critical`
            {{- else if eq .CommonLabels.severity "warning" -}}
            • *severity:* `warning`
            {{- else if eq .CommonLabels.severity "info" -}}
            • *severity:* `info`
            {{- else -}}
            • *severity:* :question: {{ .CommonLabels.severity }}
            {{- end }}
        {{- end }}
        {{ define "__alert_severity_prefix_title" -}}
            {{ if ne .Status "firing" -}}
            :white_check_mark:
            {{- else if eq .CommonLabels.severity "critical" -}}
            :fire:
            {{- else if eq .CommonLabels.severity "warning" -}}
            :warning:
            {{- else if eq .CommonLabels.severity "info" -}}
            :information_source:
            {{- else -}}
            :question:
            {{- end }}
        {{- end }}
        {{/* Title of the Slack alert */}}
        {{ define "slack.title" -}}
          [{{ .Status | toUpper -}}
          {{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{- end -}}
          ] {{ template "__alert_severity_prefix_title" . }} {{ .CommonLabels.alertname }} | {{ .CommonLabels.env }} 
        {{- end }}
        {{/* Color of Slack attachment (appears as line next to alert )*/}}
        {{ define "slack.color" -}}
          {{ if eq .Status "firing" -}}
            {{ if eq .CommonLabels.severity "warning" -}}
              warning
            {{- else if eq .CommonLabels.severity "critical" -}}
              danger
            {{- else -}}
              #439FE0
            {{- end -}}
          {{ else -}}
          good
          {{- end }}
        {{- end }}
        {{/* The text to display in the alert */}}
        {{ define "slack.text" -}}
          {{ template "__alert_severity" . }}
          {{- if (index .Alerts 0).Annotations.summary }}
          • *summary:* `{{ (index .Alerts 0).Annotations.summary }}`
          {{- end }}
          {{- if .CommonLabels.namespace }}
          • *namespace:* `{{ .CommonLabels.namespace }}`
          {{- end }}
          {{- if .CommonLabels.deployment }}
          • *deployment:* `{{ .CommonLabels.deployment }}`
          {{- end }}
          {{- if .CommonLabels.env }}
          • *env:* `{{ .CommonLabels.env }}`
          {{- end }}
          {{- if .CommonLabels.cluster }}
          • *k8s cluster:* `{{ .CommonLabels.cluster }}`
          {{- end }}
          {{ range .Alerts }}
          {{- if .Annotations.description }}
          {{ .Annotations.description }}
          {{- end }}
          {{- end }}
          *Details:*
            {{ range .CommonLabels.SortedPairs }} • *{{ .Name }}:* `{{ .Value }}`
            {{ end }}
        {{- end }}
    spec:
      externalURL: "http://vmalertmanager-br-staging-internal.stablemoney.in/"
      configNamespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: monitoring
      disableNamespaceMatcher: true
      replicaCount: 1
      retention: 240h
      resources:
        requests:
          cpu: "0.25"
          memory: 250Mi
        limits:
          cpu: "0.25"
          memory: 500Mi
      storage:
        volumeClaimTemplate:
          spec:
            storageClassName: buildpiper-storage
            accessModes:
              - "ReadWriteOnce"
            resources:
              requests:
                storage: 1Gi
  vmsingle:
    enabled: false
  defaultRules:
    create: false
  kubeApiServer:
    enabled: false
  kubeControllerManager:
    enabled: false
  kubeEtcd:
    enabled: false
  kubeScheduler:
    enabled: false
  crds:
    enabled: false
  dashboards:
    node-exporter-full: false

  vmcluster:
    enabled: true
    spec:
      retentionPeriod: "3d"
      replicationFactor: 1
      vmstorage:
        replicaCount: 1
        extraArgs:
          search.maxUniqueTimeseries: "10000000000000"
        resources:
          limits:
            cpu: "0.3"
            memory: 500Mi
          requests:
            cpu: "0.2"
            memory: 250Mi
        storage:
          volumeClaimTemplate:
            spec:
              storageClassName: buildpiper-storage
              resources:
                requests:
                  storage: 20Gi
      
      vmselect:
        replicaCount: 1
        extraArgs:
          memory.allowedPercent: "75"
          search.cacheTimestampOffset: 60m
          search.maxLabelsAPISeries: "10000000000000"
          search.maxMemoryPerQuery: 2GB
          search.maxPointsPerTimeseries: "10000000000000"
          search.maxQueryDuration: 10m
          search.maxQueryLen: "10000000000000"
          search.maxSeries: "10000000000000"
          search.maxUniqueTimeseries: "10000000000000"
        storage:
          volumeClaimTemplate:
            spec:
              storageClassName: buildpiper-storage
              resources:
                requests:
                  storage: 2Gi
        resources:
          limits:
            cpu: "0.3"
            memory: 500Mi
          requests:
            cpu: "0.2"
            memory: 250Mi
    
      vminsert:
        replicaCount: 1
        extraArgs:
          maxLabelsPerTimeseries: "100"
        image:
          tag: v1.103.0-cluster
        resources:
          limits:
            cpu: "0.3"
            memory: 500Mi
          requests:
            cpu: "0.2"
            memory: 250Mi

  vmagent:
    enabled: true
    spec:
      serviceScrapeNamespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: vm
      extraArgs:
        promscrape.maxScrapeSize: 200MB
        promscrape.streamParse: "true"
        promscrape.dropOriginalLabels: "true"
        remoteWrite.label: k8s_cluster=broking-staging,env=broking-staging
      resources:
        limits:
          cpu: "0.3"
          memory: 500Mi
        requests:
          cpu: "0.2"
          memory: 250Mi
      scrapeInterval: 30s

  vmalert:
    enabled: true
    spec:
      resources:
        limits:
          cpu: "0.5"
          memory: 500Mi
        requests:
          cpu: "0.5"
          memory: 250Mi

blackbox:
  enabled: true
  serviceMonitor:
    enabled: true
    defaults:
      additionalMetricsRelabels:
        - source_labels: [__param_target]
          target_label: target_label_name
        - source_labels: [__param_module]
          target_label: probe_type
      labels:
        prometheus: blackbox
      interval: 15s
      scrapeTimeout: 10s
      module: http_2xx
  probes:
    - job_name: k8s-service-probe
      metrics_path: /probe
      params:
        module: [http_2xx]
      kubernetes_sd_configs:
        - role: endpoints
      relabel_configs:
        # Relabel to extract service names as the target
        - source_labels: [__meta_kubernetes_service_name]
          target_label: instance
        # Set the target to the service endpoint
        - source_labels: [__meta_kubernetes_endpoint_address, __meta_kubernetes_endpoint_port_name]
          separator: ":"
          target_label: __param_target
        # Replace the address with Blackbox Exporter's address
        - target_label: __address__
          replacement: vm-blackbox.monitoring.svc.cluster.local:9115
        # Filter services by namespace (optional)
        - source_labels: [__meta_kubernetes_namespace]
          regex: monitoring|default  # Change to match your namespaces
          action: keep
        # Add additional labels
        - source_labels: [__meta_kubernetes_service_name]
          target_label: service_name
        - source_labels: [__meta_kubernetes_namespace]
          target_label: namespace


# blackbox:
#   enabled: true
#   serviceMonitor:
#     enabled: true
#     defaults:
#       additionalMetricsRelabels:
#         - source_labels: [__param_target]
#           target_label: target_label_name
#         - source_labels: [__param_module]
#           target_label: probe_type
#       labels:
#         prometheus: blackbox
#       interval: 15s  # Ensure scrape interval is reasonable (you can adjust it)
#       scrapeTimeout: 10s
#       module: http_2xx  # Ensure this module matches the probing strategy
#   probes:
#     - job_name: google-probe
#       metrics_path: /probe
#       params:
#         module: [http_2xx]
#       static_configs:
#         - targets:
#             - https://google.com  # Google target
#       relabel_configs:
#         - source_labels: [__address__]
#           target_label: __param_target
#         - source_labels: [__param_target]
#           target_label: instance
#         - target_label: __address__
#           replacement: 127.0.0.1:9115  # Correct exporter URL

